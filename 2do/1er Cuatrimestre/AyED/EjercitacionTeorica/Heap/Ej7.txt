Aplique el algoritmo HeapSort, para ordenar descendentemente los siguientes elementos: {15, 18, 40, 1, 7, 10, 33, 2, 140, 500, 11, 12, 13, 90}.
Muestre paso a paso la ejecución del algoritmo sobre los datos.

- heap inicial {14}[15|18|40|1|7|10|33|2|140|500|11|12|13|90]
- primero se construye un MinHeap con los elementos (BuildHeap), para estose toma como valor inicial tamaño_heap / 2,
y se flitra hacia abajo hasta que el elemento se encuentre un nodo terminal. Se ira decrementando el indice hasta ya no tener nodos que ordenar.

---BuildHeap---

- Ordenar heap[7] => 33
	- se compara la clave 33 con sus hijos, heap[7*2] => 90 y heap[7*2+1] => no existe
	- como ninguno de sus hijos tiene un clave menor, no se modifica la heap
	 {14}[15|18|40|1|7|10|33|2|140|500|11|12|13|90]

- Ordenar heap[6] => 10
	- se compara la clave 10 con sus hijos, heap[6*2] => 12 y heap[6*2+1] => 13
	- como ninguno de sus hijos tiene un clave menor, no se modifica la heap
	{14}[15|18|40|1|7|10|33|2|140|500|11|12|13|90]

- Ordenar heap[5] => 7
	- se compara la clave 7 con sus hijos, heap[5*2] => 500 y heap[5*2+1] => 11
	- como ninguno de sus hijos tiene un clave menor, no se modifica la heap
	{14}[15|18|40|1|7|10|33|2|140|500|11|12|13|90]

- Ordenar heap[4] => 1
	- se compara la clave 1 con sus hijos, heap[4*2] => 2 y heap[4*2+1] => 140
	- como ninguno de sus hijos tiene un clave menor, no se modifica la heap
	{14}[15|18|40|1|7|10|33|2|140|500|11|12|13|90]

- Ordenar heap[3] => 40
	- se compara la clave 40 con sus hijos, heap[3*2] => 10 y heap[3*2+1] => 33
	- se intercambia con el menor de sus hijos
	{14}[15|18|10|1|7|40|33|2|140|500|11|12|13|90]

	- como heap[6] no es un nodo terminal se compara la clave 40 con sus hijos, heap[6*2] => 12 y heap[6*2+1] => 13
	- se intercambia con el menor de sus hijos
	{14}[15|18|10|1|7|12|33|2|140|500|11|40|13|90]
	
- Ordenar heap[2] => 18
	- se compara la clave 18 con sus hijos, heap[2*2] => 1 y heap[2*2+1] => 7
	- se intercambia con el menor de sus hijos
	{14}[15|1|10|18|7|12|33|2|140|500|11|40|13|90]

	- como heap[4] no es un nodo terminal se compara la clave 18 con sus hijos, heap[4*2] => 2 y heap[4*2+1] => 140
	- se intercambia con el menor de sus hijos
	{14}[15|1|10|2|7|12|33|18|140|500|11|40|13|90]

- Ordenar heap[1] => 15
	- se compara la clave 15 con sus hijos, heap[1*2] => 1 y heap[1*2+1] => 10
	- se intercambia con el menor de sus hijos
	{14}[1|15|10|2|7|12|33|18|140|500|11|40|13|90]

	- como heap[2] no es un nodo terminal se compara la clave 15 con sus hijos, heap[2*2] => 2 y heap[2*2+1] => 7
	- se intercambia con el menor de sus hijos
	{14}[1|2|10|15|7|12|33|18|140|500|11|40|13|90]

	- como heap[4] no es un nodo terminal se compara la clave 15 con sus hijos, heap[4*2] => 18 y heap[4*2+1] => 140
	- como ninguno de sus hijos tiene un clave menor, no se modifica la heap
	{14}[1|2|10|15|7|12|33|18|140|500|11|40|13|90]

----HeapSort------

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{13}[90|2|10|15|7|12|33|18|140|500|11|40|13]/[1]

	- se compara la clave 90, con sus hijos, heap[1*2] => 2 y heap[1*2 +1] => 10
	- se intercambia con el menor de sus hijos
	{13}[2|90|10|15|7|12|33|18|140|500|11|40|13]/[1]
	
	- como heap[2] no es un nodo terminal se compara la clave 90 con sus hijos, heap[2*2] => 15 y heap[2*2+1] => 7
	- se intercambia con el menor de sus hijos
	{13}[2|7|10|15|90|12|33|18|140|500|11|40|13]/[1]

	- como heap[5] no es un nodo terminal se compara la clave 90 con sus hijos, heap[5*2] => 500 y heap[5*2+1] => 11
	- se intercambia con el menor de sus hijos
	{13}[2|7|10|15|11|12|33|18|140|500|90|40|13]/[1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{12}[13|7|10|15|11|12|33|18|140|500|90|40]/[2|1]

	- se compara la clave 13, con sus hijos, heap[1*2] => 7 y heap[1*2 +1] => 10
	- se intercambia con el menor de sus hijos
	{12}[7|13|10|15|11|12|33|18|140|500|90|40]/[2|1]
	
	- como heap[2] no es un nodo terminal se compara la clave 13 con sus hijos, heap[2*2] => 15 y heap[2*2+1] => 11
	- se intercambia con el menor de sus hijos
	{12}[7|11|10|15|13|12|33|18|140|500|90|40]/[2|1]

	- como heap[5] no es un nodo terminal se compara la clave 13 con sus hijos, heap[5*2] => 500 y heap[5*2+1] => 90
	- como ninguno de sus hijos tiene un clave menor, no se modifica la heap
	{12}[7|11|10|15|13|12|33|18|140|500|90|40]/[2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{11}[40|11|10|15|13|12|33|18|140|500|90]/[7|2|1]

	- se compara la clave 40, con sus hijos, heap[1*2] => 11 y heap[1*2 +1] => 10
	- se intercambia con el menor de sus hijos
	{11}[10|11|40|15|13|12|33|18|140|500|90]/[7|2|1]

	- como heap[3] no es un nodo terminal se compara la clave 40 con sus hijos, heap[3*2] => 12 y heap[3*2+1] => 33
	- se intercambia con el menor de sus hijos
	{11}[10|11|12|15|13|40|33|18|140|500|90]/[7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{10}[90|11|12|15|13|40|33|18|140|500]/[10|7|2|1]

	- se compara la clave 90, con sus hijos, heap[1*2] => 11 y heap[1*2 +1] => 12
	- se intercambia con el menor de sus hijos
	{10}[11|90|12|15|13|40|33|18|140|500]/[10|7|2|1]

	- como heap[2] no es un nodo terminal se compara la clave 90 con sus hijos, heap[2*2] => 15 y heap[2*2+1] => 13
	- se intercambia con el menor de sus hijos
	{10}[11|13|12|15|90|40|33|18|140|500]/[10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{9}[500|13|12|15|90|40|33|18|140]/[11|10|7|2|1]

	- se compara la clave 500, con sus hijos, heap[1*2] => 13 y heap[1*2 +1] => 12
	- se intercambia con el menor de sus hijos
	{9}[12|13|500|15|90|40|33|18|140]/[11|10|7|2|1]
	
	- como heap[3] no es un nodo terminal se compara la clave 500 con sus hijos, heap[3*2] => 40 y heap[3*2+1] => 33
	- se intercambia con el menor de sus hijos
	{9}[12|13|33|15|90|40|500|18|140]/[11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{8}[140|13|33|15|90|40|500|18]/[12|11|10|7|2|1]

	- se compara la clave 140, con sus hijos, heap[1*2] => 13 y heap[1*2 +1] => 33
	- se intercambia con el menor de sus hijos
	{8}[13|140|33|15|90|40|500|18]/[12|11|10|7|2|1]
	
	- como heap[2] no es un nodo terminal se compara la clave 140 con sus hijos, heap[2*2] => 15 y heap[2*2+1] => 90
	- se intercambia con el menor de sus hijos
	{8}[13|15|33|140|90|40|500|18]/[12|11|10|7|2|1]

	- como heap[4] no es un nodo terminal se compara la clave 140 con sus hijos, heap[4*2] => 15 y heap[4*2+1] => no existe
	- se intercambia con el menor de sus hijos
	{8}[13|15|33|18|90|40|500|140]/[12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{7}[140|15|33|18|90|40|500]/[13|12|11|10|7|2|1]

	- se compara la clave 140, con sus hijos, heap[1*2] => 15 y heap[1*2 +1] => 33
	- se intercambia con el menor de sus hijos
	{7}[15|140|33|18|90|40|500]/[13|12|11|10|7|2|1]
	
	- como heap[2] no es un nodo terminal se compara la clave 140 con sus hijos, heap[2*2] => 18 y heap[2*2+1] => 90
	- se intercambia con el menor de sus hijos
	{7}[15|18|33|140|90|40|500]/[13|12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{6}[500|18|33|140|90|40]/[15|13|12|11|10|7|2|1]

	- se compara la clave 500, con sus hijos, heap[1*2] => 18 y heap[1*2 +1] => 33
	- se intercambia con el menor de sus hijos
	{6}[18|500|33|140|90|40]/[15|13|12|11|10|7|2|1]

	- como heap[2] no es un nodo terminal se compara la clave 500 con sus hijos, heap[2*2] => 140 y heap[2*2+1] => 90
	- se intercambia con el menor de sus hijos
	{6}[18|90|33|140|500|40]/[15|13|12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{5}[40|90|33|140|500]/[18|15|13|12|11|10|7|2|1]

	- se compara la clave 40, con sus hijos, heap[1*2] => 90 y heap[1*2 +1] => 33
	- se intercambia con el menor de sus hijos
	{5}[33|90|40|140|500]/[18|15|13|12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{4}[500|90|40|140]/[33|18|15|13|12|11|10|7|2|1]
	
	- se compara la clave 500, con sus hijos, heap[1*2] => 90 y heap[1*2 +1] => 40
	- se intercambia con el menor de sus hijos
	{4}[40|90|500|140]/[33|18|15|13|12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{3}[140|90|500]/[40|33|18|15|13|12|11|10|7|2|1]

	- se compara la clave 140, con sus hijos, heap[1*2] => 90 y heap[1*2 +1] => 500
	- se intercambia con el menor de sus hijos
	{3}[90|140|500]/[40|33|18|15|13|12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{2}[500|140]/[90|40|33|18|15|13|12|11|10|7|2|1]

	- se compara la clave 500, con sus hijos, heap[1*2] => 140 y heap[1*2 +1] => no existe
	- se intercambia con el menor de sus hijos
	{2}[140|500]/[90|40|33|18|15|13|12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{1}[500]/[140|90|40|33|18|15|13|12|11|10|7|2|1]

- se intercambia el ultimo elemento con el primero, se reduce conceptualmente la canitdad maxima de elmentos y se filtra hacia abajo el primer elmento
	{0}[500|140|90|40|33|18|15|13|12|11|10|7|2|1]
	