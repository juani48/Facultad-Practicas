@startuml
abstract class SandwichComponent <<Component>>{
- name: string
- cost: double
<<create>>SandwichComponent(name: string, cost: double)
+ <<abstract>>cost(): double
}

class Principal <<ConcretComponent>> {
<<create>>Principal(name: string, cost: double)
+ cost(): double
}

abstract class Decorator <<Decorator>> {
+ <<create>>Decorator(name: string, cost: double, SandwichComponent component)
+ cost(): double
# <<abstract>>decoratorCost(): double
}

class Bread <<ConcretDecorator>>{ 
<<create>>Bread(name: string, cost: double)
# decoratorCost(): double
}

class Seasoning <<ConcretDecorator>> {
<<create>>Seasoning(name: string, cost: double)
# decoratorCost(): double
}

class Additional <<ConcretDecorator>>{
<<create>>Additional(name: string, cost: double)
# decoratorCost(): double
}

SandwichComponent <|-- Principal
SandwichComponent <|-- Decorator

Decorator --> SandwichComponent: - component

Decorator <|-- Bread
Decorator <|-- Seasoning
Decorator <|-- Additional

@enduml